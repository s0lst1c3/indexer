calling read once for once byte at a time is very expensive
if i want to read a thousand bytes calling read a thousand times
	for a 1 a byte buffer is very expensive compared to having a thousand
	byte buffer
it would be nice to have a stream of bytes of sorts

so we make a mechanism to do this.


	struct Input {

		int fd; // file descriptor
		int length;
		int used;
		char buffer[2048];
	}

	void resetInput(struct Input *iptr, int fd) {

		iptr->fd = fd;
		iptr->used = 0;
		iptr->length = 0;
	}


What this does it keeps a buffer. We're going to read the maximum size in lengths,
and keep track of the number of bytes we have already used inthe member called used.
So in reset, so far what we've said is that we've given it a file descriptor, and
said that we haven't used any bytes yet and that we have a iptr-> length of zero


int readinput(struct input *iptr) {

	char c;
	// if there are byte still in buffer that i haven't given you as the caller,
	// i'm going to give you one of those btes
	if (iptr->used < iptr->length) {

		c = iptr->BUFFER[iptr->used];
		iptr->used += 1;
		return c;
	}
	// if i can't read anymore, return -1
	else if ( (iptr->length = read(iptr->fd, iptr->buffer, sizeof(iptr->buffer))) < 1) {

		return -1;	
	}
	// otherwise i return the next character in the new buffer
	else {

		c = iptr->buffer[0];
		iptr->used = 1;
		return c;
	}
}

now here's the challenge: we want to read words of any lenght. we've all run
into the wall of c and fixed size declarations... kind of annoying. what if we
had some kind of dynamically growable buffer -- as we read bytes into that
buffer, as it get bigger we reaalloc the buffer. some point we're going to have
to decide at which point do we grow the buffer, because there's a point where
it becomes more expensive to not realloc than to realloc.


when we make a system call we're basically saying "transfer execution from
my process from the system". so there is an overhead everytime we call read.
if we call read one character at a time, it costs the same amount of overhead
as reading multiple charactars a time. therefore it makes more sense just to
read multiple bytes at a time.

Google search: locality of reference


